-- CSE 563 project by Arif Cerit & Rick Hanton

package Treadmill
public
	with Treadmill_DataTypes;
	renames Treadmill_DataTypes::all;
	with Treadmill_PowerSupply;
	renames Treadmill_PowerSupply::all;
	
	system treadmill
		features
			-- external network I/O
			wan_in: in data port;
			wan_out: out data port;
			power_bus: requires bus access Power_Supply;
	end treadmill;
	
	system implementation treadmill.impl
		subcomponents
			ui : device user_interface.impl;
			controller : system treadmill_controller.impl;
			network : device network_adapter.impl;
			safety_cord : device safety_cord.impl;
			drive_sys: system drive_system.impl;
			elevation_motor: device elevation_motor;
		connections
			uss : port ui.speed_selection -> controller.speed_input;
			ues : port ui.elevation_selection -> controller.elevation_input;
			udd : port controller.display_data -> ui.display_data;
			nic_in : port network.network_in -> controller.network_in;
			nic_out : port controller.network_out -> network.network_out;
			inet_in : port wan_in -> network.wan_in;
			inet_out : port network.wan_out -> wan_out;
			safe_in : port safety_cord.error_signal -> controller.error_signal;
			dsi: port controller.speed_output -> drive_sys.speed_input;
			dei: port controller.elevation_output -> elevation_motor.input;
			dso: port drive_sys.speed_output -> controller.speed_state;
			deo: port elevation_motor.state -> controller.elevation_state;
			
			pbaccess1: bus access power_bus -> ui.power_12V;
			pbaccess2: bus access power_bus -> network.power_3V;
			pbaccess3: bus access power_bus -> safety_cord.power_3V;
			pbaccess4: bus access power_bus -> drive_sys.power_bus;
			pbaccess5: bus access power_bus -> elevation_motor.power_12V;
			pbaccess6: bus access power_bus -> controller.power_12V;
	end treadmill.impl;
	
	-- Treadmill Controller
	system treadmill_controller
		features
			speed_input: in data port Speed;
			elevation_input: in data port Elevation;
			speed_output: out data port Speed;
			elevation_output: out data port Elevation;
			speed_state: in data port SensorData;
			elevation_state: in data port Elevation;
			display_data: out data port ScreenVisualData;
			network_in: in data port;
			network_out: out data port;
			error_signal: in data port CordPulled;
			
			power_12V: requires bus access Power_Supply.Volt12;
	end treadmill_controller;
	
	system implementation treadmill_controller.impl
		subcomponents
			set_speed: process set_speed.impl;
			set_elevation: process set_elevation.impl;
		connections
			css: port speed_input -> set_speed.desired_speed;
			cse: port elevation_input -> set_elevation.desired_elevation;
			cos: port set_speed.output_speed -> speed_output;
			coe: port set_elevation.output_elevation -> elevation_output;
	end treadmill_controller.impl;
	
	-- (Treadmill Controller) Set speed and elevation processes
	process set_speed
		features
			desired_speed: in data port Speed;
			output_speed: out data port Speed;
	end set_speed;
	
	process implementation set_speed.impl
		subcomponents
			manage_speed_change: thread manage_speed_change.impl;
		connections
			ssds: port desired_speed -> manage_speed_change.desired_speed;
			ssos: port manage_speed_change.output_speed -> output_speed;
	end set_speed.impl;
	
	process set_elevation
	features
		desired_elevation: in data port Elevation;
		output_elevation: out data port Elevation;
	end set_elevation;
	
	process implementation set_elevation.impl
		subcomponents
			manage_elevation_change: thread manage_elevation_change.impl;
		connections
			sede: port desired_elevation -> manage_elevation_change.desired_elevation;
			seoe: port manage_elevation_change.output_elevation -> output_elevation;
	end set_elevation.impl;
	
	-- (Treadmill Controller) Manage speed and elevation threads
	thread manage_speed_change
		features
			desired_speed: in data port Speed;
			output_speed: out data port Speed;
	end manage_speed_change;
	
	thread implementation manage_speed_change.impl
	end manage_speed_change.impl;
	
	thread manage_elevation_change
		features
			desired_elevation: in data port Elevation;
			output_elevation: out data port Elevation;
	end manage_elevation_change;
	
	thread implementation manage_elevation_change.impl
	end manage_elevation_change.impl;

	-- User Interface
	device user_interface
	features
		speed_selection: out data port Speed;
		elevation_selection: out data port Elevation;
		display_data: in data port ScreenVisualData;
		power_12V: requires bus access Power_Supply.Volt12;
	end user_interface;
	
	device implementation user_interface.impl
	end user_interface.impl;
	
	device network_adapter
		features
			wan_in: in data port;
			wan_out: out data port;
			network_in: out data port;
			network_out: in data port;
			power_3V: requires bus access Power_Supply.Volt3;
	end network_adapter;
	
	device implementation network_adapter.impl
	end network_adapter.impl;

	device safety_cord
		features
			error_signal: out data port CordPulled;
			power_3V: requires bus access Power_Supply.Volt3;
		properties
			Latency => 2ms .. 3ms;
	end safety_cord;
	
	device implementation safety_cord.impl
	end safety_cord.impl;
	
	system drive_system
		features
			speed_input: in data port Speed;
			speed_output: out data port SensorData;
			power_bus: requires bus access Power_Supply;
	end drive_system;
	
	system implementation drive_system.impl
		subcomponents
			pwm_controller: device drive_pwm_controller.impl;
			motor: device drive_motor.impl;
			speed_sensor: device belt_speed_sensor.impl;
		connections
			speed_set : port speed_input -> pwm_controller.speed_input;
			speed_actual : port speed_sensor.sensor_signal -> speed_output;
			pwm_set : port pwm_controller.pwm_output -> motor.pwm_input;
			
			pbaccess1: bus access power_bus -> pwm_controller.power;
			pbaccess2: bus access power_bus -> motor.power;
			pbaccess3: bus access power_bus -> speed_sensor.power;
	end drive_system.impl;
	
	-- sensor to sense current belt speed
	device belt_speed_sensor
		features
			sensor_signal: out data port SensorData;
			power: requires bus access Power_Supply.Volt3;
		flows
			sensor_read: flow source sensor_signal;
		properties
			Period => 25 ms;
			Dispatch_Protocol => Periodic;
			Latency => 5 ms .. 10 ms applies to sensor_read;
	end belt_speed_sensor;
	
	device implementation belt_speed_sensor.impl
	end belt_speed_sensor.impl;
	
	-- pwm controller for belt motor
	device drive_pwm_controller
		features
			speed_input: in data port Speed;
			pwm_output: out data port;
			power: requires bus access Power_Supply.Volt3;
	end drive_pwm_controller;
	
	device implementation drive_pwm_controller.impl
	end drive_pwm_controller.impl;
	
	-- drive motor that is high-power with pwm control
	device drive_motor
		features
			pwm_input: in data port;
			power: requires bus access Power_Supply.Volt120;
	end drive_motor;
	
	device implementation drive_motor.impl
	end drive_motor.impl;
	
	-- elevation stepper motor/actuator
	device elevation_motor
		features
			input: in data port Elevation;
			state: out data port Elevation;
			power_12V: requires bus access Power_Supply.Volt12;
--		features
--			SM_Command_Signals: feature group SM_Command_Signals;
--			Mechanical_Control_Position: out feature; --data port SM_Position.PercentOpen;
--		flows
--			flowsink: flow sink SM_Command_Signals {Latency => 1ms .. 1ms;};
--		properties
--			Dispatch_Protocol => Aperiodic;
--		annex EMV2 {**
--			use types Treadmill_ErrorTypes;
--			
--			error propagations
--				SM_Command_Signals.SM_Cmd: in propagation {MissingStepCommand, NoCommandSequence, SlowResponse};
--				SM_Command_Signals.SM_Cmd: not in propagation {DelayedResponse};
--				SM_Command_Signals.Step_Completion: not out propagation {CompletionSignalOmission};
--				Mechanical_Control_Position: out propagation {MissedStep, NoSteps, SlowResponse};
--				Mechanical_Control_Position: not out propagation {DelayedResponse};
--			flows
--				EMfailure: error source Mechanical_Control_Position {NoService} when {StepperMotorFailure};
--				cmdimpact1: error path SM_Command_Signals.SM_Cmd {MissingStepCommand} -> Mechanical_Control_Position {MissedStep};
--				cmdimpact2: error path SM_Command_Signals.SM_Cmd {NoCommandSequence} -> Mechanical_Control_Position {NoService};
--				cmdlate1: error path SM_Command_Signals.SM_Cmd {SlowResponse} -> Mechanical_Control_Position {SlowResponse};
--			end propagations;
--		**};
	end elevation_motor;
	
	device implementation elevation_motor.impl
	end elevation_motor.impl;
	
end Treadmill;
