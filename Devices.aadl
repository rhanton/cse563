-- CSE 563 project by Arif Cerit & Rick Hanton

package Treadmill_Devices
public
	with Treadmill_DataTypes;
	renames Treadmill_DataTypes::all;
	with Treadmill_ErrorTypes;
	renames Treadmill_ErrorTypes::all;
	with Base_Types;
	
	-- stepper motor (elevation actuator) command definition
	feature group SM_Command_Signals
		features
			SM_Cmd: feature group SM_Step_Cmd_Signals;
			Step_Completion: out event port;
	end SM_Command_Signals;

	feature group SM_Step_Cmd_Signals
		features
			Goto_Home: in event port;
			Increment_Step: in event data port Base_Types::Integer;
			Decrement_Step: in event data port Base_Types::Integer;
	end SM_Step_Cmd_Signals;

	bus Power_Supply
		annex EMV2 {**
			use types Treadmill_ErrorTypes;
			
			error propagations
				access: out propagation {PowerLoss};
			flows
				powerfail: error source access {PowerLoss} when {PowerFailure};
			end propagations;
		**};
	end Power_Supply;

	bus implementation Power_Supply.Volt120
	end Power_Supply.Volt120;

	bus implementation Power_Supply.Volt12
	end Power_Supply.Volt12;
	
	bus implementation Power_Supply.Volt3
	end Power_Supply.Volt3;

		-- user interface bus is used for transmitting/receiving interface data
	bus UI_bus
	end UI_bus;

		-- belt bus is used to transmit/receive data from the belt motors and sensors
	bus belt_bus
	end belt_bus;

		-- ethernet bus is used for lan/wan network communication
	bus ethernet
	end ethernet;

	device UserInterface
		features
			busin: requires bus access UI_bus;
			busout: requires bus access UI_bus;
			display_data: in data port ScreenVisualData;
			display_out: out data port SelectionCoordinates;
	end UserInterface;

	device SafetyCord
		features
			error_signal: out data port CordPulled;
		properties
			Latency => 2ms .. 3ms;
	end SafetyCord;
	
	system DriveSystem
	end DriveSystem;
	
	system implementation DriveSystem.Primary
		subcomponents
			belt_pwm_controller: device DrivePWMController;
			belt_motor: device DriveMotor;
			elevation_motor: device ElevationMotor;
			speed_sensor: device BeltSpeedSensor;
	end DriveSystem.Primary;
	
	-- sensor to sense current belt speed
	device BeltSpeedSensor
		features
			power: requires bus access Power_Supply.Volt3;
			busout: requires bus access belt_bus;
			sensor_signal: out data port SensorData;
		flows
			sensor_read: flow source sensor_signal;
		properties
			Period => 25 ms;
			Dispatch_Protocol => Periodic;
			Latency => 5 ms .. 10 ms applies to sensor_read;
	end BeltSpeedSensor;
	
	device DrivePWMController
		
	end DrivePWMController;

	device DriveMotor
		
	end DriveMotor;

	device ElevationMotor
		features
			SM_Command_Signals: feature group SM_Command_Signals;
			Mechanical_Control_Position: out feature; --data port SM_Position.PercentOpen;
			Power: requires bus access Power_Supply.Volt120;
		flows
			flowsink: flow sink SM_Command_Signals {Latency => 1ms .. 1ms;};
		properties
			Dispatch_Protocol => Aperiodic;
		annex EMV2 {**
			use types Treadmill_ErrorTypes;
			
			error propagations
				SM_Command_Signals.SM_Cmd: in propagation {MissingStepCommand, NoCommandSequence, SlowResponse};
				SM_Command_Signals.SM_Cmd: not in propagation {DelayedResponse};
				SM_Command_Signals.Step_Completion: not out propagation {CompletionSignalOmission};
				Power: in propagation {NoService};
				Mechanical_Control_Position: out propagation {MissedStep, NoSteps, SlowResponse};
				Mechanical_Control_Position: not out propagation {DelayedResponse};
			flows
				EMfailure: error source Mechanical_Control_Position {NoService} when {StepperMotorFailure};
				cmdimpact1: error path SM_Command_Signals.SM_Cmd {MissingStepCommand} -> Mechanical_Control_Position {MissedStep};
				cmdimpact2: error path SM_Command_Signals.SM_Cmd {NoCommandSequence} -> Mechanical_Control_Position {NoService};
				cmdlate1: error path SM_Command_Signals.SM_Cmd {SlowResponse} -> Mechanical_Control_Position {SlowResponse};
				nopower: error path Power {NoService} -> Mechanical_Control_Position {NoService};
			end propagations;
		**};
	end ElevationMotor;
	
end Treadmill_Devices;
